from datetime import datetime, timedelta
import json
import random

class ReviewLogic:
    def __init__(self):
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (1 –¥–µ–Ω—å, 3 –¥–Ω—è, 7 –¥–Ω–µ–π, 14 –¥–Ω–µ–π, 30 –¥–Ω–µ–π)
        self.intervals = [1, 3, 7, 14, 30]
        self.data = self.load_data()
        
    def load_data(self):
        try:
            with open('data.json', 'r', encoding='utf-8') as file:
                return json.load(file)
        except FileNotFoundError:
            return {}

    def save_data(self):
        with open('data.json', 'w', encoding='utf-8') as file:
            json.dump(self.data, file, ensure_ascii=False, indent=2)

    def init_user(self, user_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.data:
            self.data[user_id] = {
                'materials': [],
                'stats': {
                    'completed': 0,
                    'in_progress': 0,
                    'streak': 0,
                    'last_review': None,
                    'achievements': []
                }
            }
            self.save_data()

    def add_material(self, user_id, text):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
        self.init_user(user_id)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        next_dates = []
        current_date = datetime.now()
        
        for days in self.intervals:
            next_date = current_date + timedelta(days=days)
            next_dates.append(next_date.strftime("%Y-%m-%d"))

        material = {
            "text": text,
            "review_dates": next_dates,
            "current_step": 0,
            "completed": False,
            "added_date": current_date.strftime("%Y-%m-%d"),
            "last_reviewed": None
        }

        self.data[user_id]['materials'].append(material)
        self.data[user_id]['stats']['in_progress'] += 1
        self.save_data()

    def get_reviews(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        self.init_user(user_id)
        today = datetime.now().strftime("%Y-%m-%d")
        to_review = []

        for material in self.data[user_id]['materials']:
            if not material["completed"]:
                current_step = material["current_step"]
                if current_step < len(self.intervals):
                    if material["review_dates"][current_step] <= today:
                        to_review.append(material)

        return to_review

    def mark_reviewed(self, user_id, text):
        """–û—Ç–º–µ—Ç–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∫–∞–∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—ã–π"""
        self.init_user(user_id)
        today = datetime.now().strftime("%Y-%m-%d")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        last_review = self.data[user_id]['stats']['last_review']
        if last_review:
            yesterday = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
            if last_review == yesterday:
                self.data[user_id]['stats']['streak'] += 1
            elif last_review != today:
                self.data[user_id]['stats']['streak'] = 1
        else:
            self.data[user_id]['stats']['streak'] = 1
        
        self.data[user_id]['stats']['last_review'] = today

        for material in self.data[user_id]['materials']:
            if material["text"] == text and not material["completed"]:
                material["current_step"] += 1
                material["last_reviewed"] = today
                
                if material["current_step"] >= len(self.intervals):
                    material["completed"] = True
                    self.data[user_id]['stats']['completed'] += 1
                    self.data[user_id]['stats']['in_progress'] -= 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    self.check_achievements(user_id)
                
                self.save_data()
                break

    def get_stats(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.init_user(user_id)
        stats = self.data[user_id]['stats']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É—Å–µ—Ä–¥–∏—è
        streak = stats['streak']
        if streak >= 30:
            level = "–ì–µ–Ω–∏–π! üß†"
        elif streak >= 20:
            level = "–ú–∞—Å—Ç–µ—Ä! üéØ"
        elif streak >= 10:
            level = "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π! üí™"
        elif streak >= 5:
            level = "–°—Ç–∞—Ä–∞—Ç–µ–ª—å–Ω—ã–π! üìö"
        else:
            level = "–ù–∞—á–∏–Ω–∞—é—â–∏–π! üå±"

        return {
            'completed': stats['completed'],
            'in_progress': stats['in_progress'],
            'streak': stats['streak'],
            'level': level,
            'achievements': stats['achievements']
        }

    def get_all_materials(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        self.init_user(user_id)
        return self.data[user_id]['materials']

    def get_random_material(self, user_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"""
        self.init_user(user_id)
        materials = self.data[user_id]['materials']
        if not materials:
            return None
        return random.choice(materials)

    def check_achievements(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"""
        stats = self.data[user_id]['stats']
        achievements = stats['achievements']
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        completed = stats['completed']
        if completed >= 50 and "–ú—É–¥—Ä–µ—Ü üéì" not in achievements:
            achievements.append("–ú—É–¥—Ä–µ—Ü üéì")
        elif completed >= 25 and "–ó–Ω–∞—Ç–æ–∫ üìö" not in achievements:
            achievements.append("–ó–Ω–∞—Ç–æ–∫ üìö")
        elif completed >= 10 and "–£—á–µ–Ω–∏–∫ üìñ" not in achievements:
            achievements.append("–£—á–µ–Ω–∏–∫ üìñ")
        
        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —Å–µ—Ä–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        streak = stats['streak']
        if streak >= 30 and "–ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è üí™" not in achievements:
            achievements.append("–ñ–µ–ª–µ–∑–Ω–∞—è –≤–æ–ª—è üí™")
        elif streak >= 15 and "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å üéØ" not in achievements:
            achievements.append("–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å üéØ")
        elif streak >= 7 and "–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å ‚≠ê" not in achievements:
            achievements.append("–¶–µ–ª–µ—É—Å—Ç—Ä–µ–º–ª–µ–Ω–Ω–æ—Å—Ç—å ‚≠ê")
        
        self.save_data()
