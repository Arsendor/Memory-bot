import telebot
from logic import ReviewLogic
from config import TOKEN, MESSAGES, MOTIVATION
import random

bot = telebot.TeleBot(TOKEN)
review_logic = ReviewLogic()

def get_main_keyboard():
    """–°–æ–∑–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        telebot.types.KeyboardButton("üìö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã"),
        telebot.types.KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    )
    keyboard.add(
        telebot.types.KeyboardButton("üìñ –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"),
        telebot.types.KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª")
    )
    keyboard.add(
        telebot.types.KeyboardButton("üî• –°–µ—Ä–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"),
        telebot.types.KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
    )
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, MESSAGES['welcome'], reply_markup=get_main_keyboard())

@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, MESSAGES['help'])

@bot.message_handler(commands=['check'])
def check_reviews(message):
    reviews = review_logic.get_reviews(str(message.chat.id))
    if not reviews:
        bot.reply_to(message, MESSAGES['no_reviews'])
        return

    for material in reviews:
        markup = telebot.types.InlineKeyboardMarkup(row_width=2)
        markup.add(
            telebot.types.InlineKeyboardButton(
                "‚úÖ –ü–æ–≤—Ç–æ—Ä–µ–Ω–æ",
                callback_data=f"reviewed_{material['text']}"
            ),
            telebot.types.InlineKeyboardButton(
                "üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ",
                callback_data=f"later_{material['text']}"
            )
        )
        bot.send_message(
            message.chat.id,
            MESSAGES['review_ready'].format(material['text']),
            reply_markup=markup
        )

@bot.message_handler(commands=['stats'])
def stats_command(message):
    stats = review_logic.get_stats(str(message.chat.id))
    achievements = "\n".join(stats['achievements']) if stats['achievements'] else "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"
    
    bot.reply_to(message, MESSAGES['stats'].format(
        stats['completed'],
        stats['in_progress'],
        stats['streak'],
        stats['level'],
        achievements
    ))

@bot.message_handler(commands=['list'])
def list_command(message):
    materials = review_logic.get_all_materials(str(message.chat.id))
    if not materials:
        bot.reply_to(message, MESSAGES['list_empty'])
        return

    response = MESSAGES['list_header']
    for material in materials:
        status = "‚úÖ" if material['completed'] else "üìö"
        response += MESSAGES['list_item'].format(f"{status} {material['text']}")
    
    bot.reply_to(message, response)

@bot.message_handler(commands=['random'])
def random_command(message):
    material = review_logic.get_random_material(str(message.chat.id))
    if not material:
        bot.reply_to(message, MESSAGES['no_materials'])
        return

    bot.reply_to(message, MESSAGES['random'] + material['text'])

@bot.message_handler(commands=['streak'])
def streak_command(message):
    stats = review_logic.get_stats(str(message.chat.id))
    motivation = random.choice(MOTIVATION)
    bot.reply_to(message, MESSAGES['streak'].format(
        stats['streak'],
        motivation
    ))

@bot.callback_query_handler(func=lambda call: call.data.startswith('reviewed_'))
def handle_review_callback(call):
    material = call.data.replace('reviewed_', '')
    review_logic.mark_reviewed(str(call.message.chat.id), material)
    
    stats = review_logic.get_stats(str(call.message.chat.id))
    if stats['streak'] > 1:
        response = f"‚úÖ –û—Ç–º–µ—á–µ–Ω–æ! –°–µ—Ä–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {stats['streak']} –¥–Ω–µ–π! üî•"
    else:
        response = "‚úÖ –û—Ç–º–µ—á–µ–Ω–æ! " + random.choice(MOTIVATION)
    
    bot.answer_callback_query(call.id, response)
    bot.edit_message_reply_markup(
        call.message.chat.id,
        call.message.message_id,
        reply_markup=None
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('later_'))
def handle_later_callback(call):
    bot.answer_callback_query(call.id, "üëå –•–æ—Ä–æ—à–æ, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ!")
    bot.edit_message_reply_markup(
        call.message.chat.id,
        call.message.message_id,
        reply_markup=None
    )

@bot.message_handler(func=lambda message: True)
def handle_material(message):
    text = message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    if text == "üìö –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã":
        check_reviews(message)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        stats_command(message)
    elif text == "üìñ –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤":
        list_command(message)
    elif text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª":
        random_command(message)
    elif text == "üî• –°–µ—Ä–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π":
        streak_command(message)
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        help_command(message)
    else:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        review_logic.add_material(str(message.chat.id), text)
        bot.reply_to(message, MESSAGES['material_added'])

if __name__ == '__main__':
    bot.polling(none_stop=True)
